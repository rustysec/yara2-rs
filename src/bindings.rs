/* automatically generated by rust-bindgen */

pub const STRING_GFLAGS_NULL: u32 = 4096;
pub const META_TYPE_NULL: u32 = 0;
pub const META_TYPE_INTEGER: u32 = 1;
pub const META_TYPE_STRING: u32 = 2;
pub const META_TYPE_BOOLEAN: u32 = 3;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__jmpbuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__jmpbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__mask_was_saved as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__saved_mask as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__saved_mask)
        )
    );
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_RELOC {
    pub offset: u32,
    pub next: *mut _YR_RELOC,
}
#[test]
fn bindgen_test_layout__YR_RELOC() {
    assert_eq!(
        ::std::mem::size_of::<_YR_RELOC>(),
        16usize,
        concat!("Size of: ", stringify!(_YR_RELOC))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_RELOC>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_RELOC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RELOC>())).offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RELOC),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RELOC>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RELOC),
            "::",
            stringify!(next)
        )
    );
}
pub type YR_RELOC = _YR_RELOC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_ARENA_PAGE {
    pub new_address: *mut u8,
    pub address: *mut u8,
    pub size: usize,
    pub used: usize,
    pub reloc_list_head: *mut YR_RELOC,
    pub reloc_list_tail: *mut YR_RELOC,
    pub next: *mut _YR_ARENA_PAGE,
    pub prev: *mut _YR_ARENA_PAGE,
}
#[test]
fn bindgen_test_layout__YR_ARENA_PAGE() {
    assert_eq!(
        ::std::mem::size_of::<_YR_ARENA_PAGE>(),
        64usize,
        concat!("Size of: ", stringify!(_YR_ARENA_PAGE))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_ARENA_PAGE>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_ARENA_PAGE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_ARENA_PAGE>())).new_address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_ARENA_PAGE),
            "::",
            stringify!(new_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_ARENA_PAGE>())).address as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_ARENA_PAGE),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_ARENA_PAGE>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_ARENA_PAGE),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_ARENA_PAGE>())).used as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_ARENA_PAGE),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_ARENA_PAGE>())).reloc_list_head as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_ARENA_PAGE),
            "::",
            stringify!(reloc_list_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_ARENA_PAGE>())).reloc_list_tail as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_ARENA_PAGE),
            "::",
            stringify!(reloc_list_tail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_ARENA_PAGE>())).next as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_ARENA_PAGE),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_ARENA_PAGE>())).prev as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_ARENA_PAGE),
            "::",
            stringify!(prev)
        )
    );
}
pub type YR_ARENA_PAGE = _YR_ARENA_PAGE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_ARENA {
    pub flags: ::std::os::raw::c_int,
    pub page_list_head: *mut YR_ARENA_PAGE,
    pub current_page: *mut YR_ARENA_PAGE,
}
#[test]
fn bindgen_test_layout__YR_ARENA() {
    assert_eq!(
        ::std::mem::size_of::<_YR_ARENA>(),
        24usize,
        concat!("Size of: ", stringify!(_YR_ARENA))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_ARENA>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_ARENA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_ARENA>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_ARENA),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_ARENA>())).page_list_head as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_ARENA),
            "::",
            stringify!(page_list_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_ARENA>())).current_page as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_ARENA),
            "::",
            stringify!(current_page)
        )
    );
}
pub type YR_ARENA = _YR_ARENA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_HASH_TABLE_ENTRY {
    pub key: *mut ::std::os::raw::c_void,
    pub key_length: usize,
    pub ns: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_void,
    pub next: *mut _YR_HASH_TABLE_ENTRY,
}
#[test]
fn bindgen_test_layout__YR_HASH_TABLE_ENTRY() {
    assert_eq!(
        ::std::mem::size_of::<_YR_HASH_TABLE_ENTRY>(),
        40usize,
        concat!("Size of: ", stringify!(_YR_HASH_TABLE_ENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_HASH_TABLE_ENTRY>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_HASH_TABLE_ENTRY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_HASH_TABLE_ENTRY>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_HASH_TABLE_ENTRY),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_HASH_TABLE_ENTRY>())).key_length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_HASH_TABLE_ENTRY),
            "::",
            stringify!(key_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_HASH_TABLE_ENTRY>())).ns as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_HASH_TABLE_ENTRY),
            "::",
            stringify!(ns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_HASH_TABLE_ENTRY>())).value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_HASH_TABLE_ENTRY),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_HASH_TABLE_ENTRY>())).next as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_HASH_TABLE_ENTRY),
            "::",
            stringify!(next)
        )
    );
}
pub type YR_HASH_TABLE_ENTRY = _YR_HASH_TABLE_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_HASH_TABLE {
    pub size: ::std::os::raw::c_int,
    pub buckets: [*mut YR_HASH_TABLE_ENTRY; 1usize],
}
#[test]
fn bindgen_test_layout__YR_HASH_TABLE() {
    assert_eq!(
        ::std::mem::size_of::<_YR_HASH_TABLE>(),
        16usize,
        concat!("Size of: ", stringify!(_YR_HASH_TABLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_HASH_TABLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_HASH_TABLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_HASH_TABLE>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_HASH_TABLE),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_HASH_TABLE>())).buckets as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_HASH_TABLE),
            "::",
            stringify!(buckets)
        )
    );
}
pub type YR_HASH_TABLE = _YR_HASH_TABLE;
pub type YR_MUTEX = pthread_mutex_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_NAMESPACE {
    pub t_flags: [i32; 32usize],
    pub __bindgen_anon_1: YR_NAMESPACE__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_NAMESPACE__bindgen_ty_1 {
    pub name: *mut ::std::os::raw::c_char,
    pub name_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_NAMESPACE__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<YR_NAMESPACE__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_NAMESPACE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_NAMESPACE__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_NAMESPACE__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_NAMESPACE__bindgen_ty_1>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_NAMESPACE__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_NAMESPACE__bindgen_ty_1>())).name_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_NAMESPACE__bindgen_ty_1),
            "::",
            stringify!(name_)
        )
    );
}
#[test]
fn bindgen_test_layout_YR_NAMESPACE() {
    assert_eq!(
        ::std::mem::size_of::<YR_NAMESPACE>(),
        136usize,
        concat!("Size of: ", stringify!(YR_NAMESPACE))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_NAMESPACE>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_NAMESPACE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_NAMESPACE>())).t_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_NAMESPACE),
            "::",
            stringify!(t_flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_META {
    pub type__: i32,
    pub integer: i64,
    pub __bindgen_anon_1: YR_META__bindgen_ty_1,
    pub __bindgen_anon_2: YR_META__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_META__bindgen_ty_1 {
    pub identifier: *const ::std::os::raw::c_char,
    pub identifier_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_META__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<YR_META__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_META__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_META__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_META__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_META__bindgen_ty_1>())).identifier as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_META__bindgen_ty_1),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_META__bindgen_ty_1>())).identifier_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_META__bindgen_ty_1),
            "::",
            stringify!(identifier_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_META__bindgen_ty_2 {
    pub string: *mut ::std::os::raw::c_char,
    pub string_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_META__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<YR_META__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_META__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_META__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_META__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_META__bindgen_ty_2>())).string as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_META__bindgen_ty_2),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_META__bindgen_ty_2>())).string_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_META__bindgen_ty_2),
            "::",
            stringify!(string_)
        )
    );
}
#[test]
fn bindgen_test_layout_YR_META() {
    assert_eq!(
        ::std::mem::size_of::<YR_META>(),
        32usize,
        concat!("Size of: ", stringify!(YR_META))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_META>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_META))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_META>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_META),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_META>())).integer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_META),
            "::",
            stringify!(integer)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_MATCHES {
    pub count: i32,
    pub __bindgen_anon_1: YR_MATCHES__bindgen_ty_1,
    pub __bindgen_anon_2: YR_MATCHES__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_MATCHES__bindgen_ty_1 {
    pub head: *mut YR_MATCH,
    pub head_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layoutYR_MATCHES__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<YR_MATCHES__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_MATCHES__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_MATCHES__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_MATCHES__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_MATCHES__bindgen_ty_1>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCHES__bindgen_ty_1),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_MATCHES__bindgen_ty_1>())).head_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCHES__bindgen_ty_1),
            "::",
            stringify!(head_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_MATCHES__bindgen_ty_2 {
    pub tail: *mut YR_MATCH,
    pub tail_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layoutYR_MATCHES__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<YR_MATCHES__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_MATCHES__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_MATCHES__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_MATCHES__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_MATCHES__bindgen_ty_2>())).tail as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCHES__bindgen_ty_2),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_MATCHES__bindgen_ty_2>())).tail_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCHES__bindgen_ty_2),
            "::",
            stringify!(tail_)
        )
    );
}
#[test]
fn bindgen_test_layoutYR_MATCHES() {
    assert_eq!(
        ::std::mem::size_of::<YR_MATCHES>(),
        24usize,
        concat!("Size of: ", stringify!(YR_MATCHES))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_MATCHES>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_MATCHES))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_MATCHES>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCHES),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_STRING {
    pub g_flags: i32,
    pub length: i32,
    pub __bindgen_anon_1: YR_STRING__bindgen_ty_1,
    pub __bindgen_anon_2: YR_STRING__bindgen_ty_2,
    pub __bindgen_anon_3: YR_STRING__bindgen_ty_3,
    pub __bindgen_anon_4: YR_STRING__bindgen_ty_4,
    pub chain_gap_min: i32,
    pub chain_gap_max: i32,
    pub fixed_offset: i64,
    pub matches: [YR_MATCHES; 32usize],
    pub unconfirmed_matches: [YR_MATCHES; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_STRING__bindgen_ty_1 {
    pub identifier: *mut ::std::os::raw::c_char,
    pub identifier_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_STRING__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<YR_STRING__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_STRING__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_STRING__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_STRING__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_STRING__bindgen_ty_1>())).identifier as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING__bindgen_ty_1),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_STRING__bindgen_ty_1>())).identifier_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING__bindgen_ty_1),
            "::",
            stringify!(identifier_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_STRING__bindgen_ty_2 {
    pub string: *mut u8,
    pub string_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_STRING__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<YR_STRING__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_STRING__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_STRING__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_STRING__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_STRING__bindgen_ty_2>())).string as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING__bindgen_ty_2),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_STRING__bindgen_ty_2>())).string_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING__bindgen_ty_2),
            "::",
            stringify!(string_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_STRING__bindgen_ty_3 {
    pub chained_to: *mut YR_STRING,
    pub chained_to_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_STRING__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<YR_STRING__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(YR_STRING__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_STRING__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_STRING__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_STRING__bindgen_ty_3>())).chained_to as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING__bindgen_ty_3),
            "::",
            stringify!(chained_to)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_STRING__bindgen_ty_3>())).chained_to_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING__bindgen_ty_3),
            "::",
            stringify!(chained_to_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_STRING__bindgen_ty_4 {
    pub rule: *mut YR_RULE,
    pub rule_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_STRING__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<YR_STRING__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(YR_STRING__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_STRING__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_STRING__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_STRING__bindgen_ty_4>())).rule as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING__bindgen_ty_4),
            "::",
            stringify!(rule)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_STRING__bindgen_ty_4>())).rule_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING__bindgen_ty_4),
            "::",
            stringify!(rule_)
        )
    );
}
#[test]
fn bindgen_test_layout_YR_STRING() {
    assert_eq!(
        ::std::mem::size_of::<YR_STRING>(),
        1592usize,
        concat!("Size of: ", stringify!(YR_STRING))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_STRING>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_STRING))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_STRING>())).g_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING),
            "::",
            stringify!(g_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_STRING>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_STRING>())).chain_gap_min as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING),
            "::",
            stringify!(chain_gap_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_STRING>())).chain_gap_max as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING),
            "::",
            stringify!(chain_gap_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_STRING>())).fixed_offset as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING),
            "::",
            stringify!(fixed_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_STRING>())).matches as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING),
            "::",
            stringify!(matches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_STRING>())).unconfirmed_matches as *const _ as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING),
            "::",
            stringify!(unconfirmed_matches)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_RULE {
    pub g_flags: i32,
    pub t_flags: [i32; 32usize],
    pub __bindgen_anon_1: YR_RULE__bindgen_ty_1,
    pub __bindgen_anon_2: YR_RULE__bindgen_ty_2,
    pub __bindgen_anon_3: YR_RULE__bindgen_ty_3,
    pub __bindgen_anon_4: YR_RULE__bindgen_ty_4,
    pub __bindgen_anon_5: YR_RULE__bindgen_ty_5,
    pub num_atoms: i32,
    pub time_cost: i64,
    pub time_cost_per_thread: [i64; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_1 {
    pub identifier: *const ::std::os::raw::c_char,
    pub identifier_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_RULE__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULE__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_RULE__bindgen_ty_1>())).identifier as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_1),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_RULE__bindgen_ty_1>())).identifier_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_1),
            "::",
            stringify!(identifier_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_2 {
    pub tags: *const ::std::os::raw::c_char,
    pub tags_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_RULE__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULE__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULE__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULE__bindgen_ty_2>())).tags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_2),
            "::",
            stringify!(tags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULE__bindgen_ty_2>())).tags_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_2),
            "::",
            stringify!(tags_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_3 {
    pub metas: *mut YR_META,
    pub metas_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_RULE__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULE__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULE__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULE__bindgen_ty_3>())).metas as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_3),
            "::",
            stringify!(metas)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULE__bindgen_ty_3>())).metas_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_3),
            "::",
            stringify!(metas_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_4 {
    pub strings: *mut YR_STRING,
    pub strings_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_RULE__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULE__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULE__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULE__bindgen_ty_4>())).strings as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_4),
            "::",
            stringify!(strings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULE__bindgen_ty_4>())).strings_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_4),
            "::",
            stringify!(strings_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_5 {
    pub ns: *mut YR_NAMESPACE,
    pub ns_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_RULE__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULE__bindgen_ty_5>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULE__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE__bindgen_ty_5))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULE__bindgen_ty_5>())).ns as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_5),
            "::",
            stringify!(ns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULE__bindgen_ty_5>())).ns_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_5),
            "::",
            stringify!(ns_)
        )
    );
}
#[test]
fn bindgen_test_layout_YR_RULE() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULE>(),
        448usize,
        concat!("Size of: ", stringify!(YR_RULE))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULE>())).g_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE),
            "::",
            stringify!(g_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULE>())).t_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE),
            "::",
            stringify!(t_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULE>())).num_atoms as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE),
            "::",
            stringify!(num_atoms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULE>())).time_cost as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE),
            "::",
            stringify!(time_cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULE>())).time_cost_per_thread as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE),
            "::",
            stringify!(time_cost_per_thread)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_EXTERNAL_VARIABLE {
    pub type_: i32,
    pub value: YR_EXTERNAL_VARIABLE__bindgen_ty_1,
    pub __bindgen_anon_1: YR_EXTERNAL_VARIABLE__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_EXTERNAL_VARIABLE__bindgen_ty_1 {
    pub i: i64,
    pub f: f64,
    pub s: *mut ::std::os::raw::c_char,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_EXTERNAL_VARIABLE__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<YR_EXTERNAL_VARIABLE__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_EXTERNAL_VARIABLE__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_EXTERNAL_VARIABLE__bindgen_ty_1>())).i as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_EXTERNAL_VARIABLE__bindgen_ty_1>())).f as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_1),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_EXTERNAL_VARIABLE__bindgen_ty_1>())).s as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_1),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_EXTERNAL_VARIABLE__bindgen_ty_2 {
    pub identifier: *const ::std::os::raw::c_char,
    pub identifier_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_EXTERNAL_VARIABLE__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<YR_EXTERNAL_VARIABLE__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_EXTERNAL_VARIABLE__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_EXTERNAL_VARIABLE__bindgen_ty_2>())).identifier as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_2),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_EXTERNAL_VARIABLE__bindgen_ty_2>())).identifier_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_2),
            "::",
            stringify!(identifier_)
        )
    );
}
#[test]
fn bindgen_test_layout_YR_EXTERNAL_VARIABLE() {
    assert_eq!(
        ::std::mem::size_of::<YR_EXTERNAL_VARIABLE>(),
        24usize,
        concat!("Size of: ", stringify!(YR_EXTERNAL_VARIABLE))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_EXTERNAL_VARIABLE>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_EXTERNAL_VARIABLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_EXTERNAL_VARIABLE>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_EXTERNAL_VARIABLE),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_EXTERNAL_VARIABLE>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_EXTERNAL_VARIABLE),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_AC_MATCH {
    pub backtrack: u16,
    pub __bindgen_anon_1: YR_AC_MATCH__bindgen_ty_1,
    pub __bindgen_anon_2: YR_AC_MATCH__bindgen_ty_2,
    pub __bindgen_anon_3: YR_AC_MATCH__bindgen_ty_3,
    pub __bindgen_anon_4: YR_AC_MATCH__bindgen_ty_4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH__bindgen_ty_1 {
    pub string: *mut YR_STRING,
    pub string_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_AC_MATCH__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_MATCH__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_AC_MATCH__bindgen_ty_1>())).string as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH__bindgen_ty_1),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_AC_MATCH__bindgen_ty_1>())).string_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH__bindgen_ty_1),
            "::",
            stringify!(string_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH__bindgen_ty_2 {
    pub forward_code: *const u8,
    pub forward_code_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_AC_MATCH__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_MATCH__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_AC_MATCH__bindgen_ty_2>())).forward_code as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH__bindgen_ty_2),
            "::",
            stringify!(forward_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_AC_MATCH__bindgen_ty_2>())).forward_code_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH__bindgen_ty_2),
            "::",
            stringify!(forward_code_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH__bindgen_ty_3 {
    pub backward_code: *const u8,
    pub backward_code_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(YR_AC_MATCH__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_MATCH__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_AC_MATCH__bindgen_ty_3>())).backward_code as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH__bindgen_ty_3),
            "::",
            stringify!(backward_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_AC_MATCH__bindgen_ty_3>())).backward_code_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH__bindgen_ty_3),
            "::",
            stringify!(backward_code_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH__bindgen_ty_4 {
    pub next: *mut YR_AC_MATCH,
    pub next_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(YR_AC_MATCH__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_MATCH__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_AC_MATCH__bindgen_ty_4>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH__bindgen_ty_4),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_AC_MATCH__bindgen_ty_4>())).next_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH__bindgen_ty_4),
            "::",
            stringify!(next_)
        )
    );
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH() {
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH>(),
        40usize,
        concat!("Size of: ", stringify!(YR_AC_MATCH))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_MATCH))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_AC_MATCH>())).backtrack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH),
            "::",
            stringify!(backtrack)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_AC_MATCH_TABLE_ENTRY {
    pub __bindgen_anon_1: YR_AC_MATCH_TABLE_ENTRY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH_TABLE_ENTRY__bindgen_ty_1 {
    pub match__: *mut YR_AC_MATCH,
    pub match_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH_TABLE_ENTRY__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH_TABLE_ENTRY__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(YR_AC_MATCH_TABLE_ENTRY__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH_TABLE_ENTRY__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(YR_AC_MATCH_TABLE_ENTRY__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_AC_MATCH_TABLE_ENTRY__bindgen_ty_1>())).match_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH_TABLE_ENTRY__bindgen_ty_1),
            "::",
            stringify!(match_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_AC_MATCH_TABLE_ENTRY__bindgen_ty_1>())).match_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH_TABLE_ENTRY__bindgen_ty_1),
            "::",
            stringify!(match_)
        )
    );
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH_TABLE_ENTRY() {
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH_TABLE_ENTRY>(),
        8usize,
        concat!("Size of: ", stringify!(YR_AC_MATCH_TABLE_ENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH_TABLE_ENTRY>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_MATCH_TABLE_ENTRY))
    );
}
pub type YR_AC_TRANSITION = u32;
pub type YR_AC_TRANSITION_TABLE = *mut YR_AC_TRANSITION;
pub type YR_AC_MATCH_TABLE = *mut YR_AC_MATCH_TABLE_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RE_NODE {
    pub type_: ::std::os::raw::c_int,
    pub __bindgen_anon_1: RE_NODE__bindgen_ty_1,
    pub __bindgen_anon_2: RE_NODE__bindgen_ty_2,
    pub greedy: ::std::os::raw::c_int,
    pub re_class: *mut RE_CLASS,
    pub children_head: *mut RE_NODE,
    pub children_tail: *mut RE_NODE,
    pub prev_sibling: *mut RE_NODE,
    pub next_sibling: *mut RE_NODE,
    pub forward_code: *mut u8,
    pub backward_code: *mut u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RE_NODE__bindgen_ty_1 {
    pub value: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub start: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_RE_NODE__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RE_NODE__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(RE_NODE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_NODE__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(RE_NODE__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_NODE__bindgen_ty_1>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_NODE__bindgen_ty_1>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_NODE__bindgen_ty_1>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE__bindgen_ty_1),
            "::",
            stringify!(start)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RE_NODE__bindgen_ty_2 {
    pub mask: ::std::os::raw::c_int,
    pub end: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_RE_NODE__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<RE_NODE__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(RE_NODE__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_NODE__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(RE_NODE__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_NODE__bindgen_ty_2>())).mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE__bindgen_ty_2),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_NODE__bindgen_ty_2>())).end as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE__bindgen_ty_2),
            "::",
            stringify!(end)
        )
    );
}
#[test]
fn bindgen_test_layout_RE_NODE() {
    assert_eq!(
        ::std::mem::size_of::<RE_NODE>(),
        72usize,
        concat!("Size of: ", stringify!(RE_NODE))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_NODE>(),
        8usize,
        concat!("Alignment of ", stringify!(RE_NODE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_NODE>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_NODE>())).greedy as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(greedy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_NODE>())).re_class as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(re_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_NODE>())).children_head as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(children_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_NODE>())).children_tail as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(children_tail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_NODE>())).prev_sibling as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(prev_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_NODE>())).next_sibling as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(next_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_NODE>())).forward_code as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(forward_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_NODE>())).backward_code as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(backward_code)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_CLASS {
    pub negated: u8,
    pub bitmap: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_RE_CLASS() {
    assert_eq!(
        ::std::mem::size_of::<RE_CLASS>(),
        33usize,
        concat!("Size of: ", stringify!(RE_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_CLASS>(),
        1usize,
        concat!("Alignment of ", stringify!(RE_CLASS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_CLASS>())).negated as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_CLASS),
            "::",
            stringify!(negated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_CLASS>())).bitmap as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_CLASS),
            "::",
            stringify!(bitmap)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_AST {
    pub flags: u32,
    pub root_node: *mut RE_NODE,
}
#[test]
fn bindgen_test_layout_RE_AST() {
    assert_eq!(
        ::std::mem::size_of::<RE_AST>(),
        16usize,
        concat!("Size of: ", stringify!(RE_AST))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_AST>(),
        8usize,
        concat!("Alignment of ", stringify!(RE_AST))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_AST>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_AST),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RE_AST>())).root_node as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_AST),
            "::",
            stringify!(root_node)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_MATCH {
    pub base: i64,
    pub offset: i64,
    pub match_length: i32,
    pub data_length: i32,
    pub data: *const u8,
    pub chain_length: i32,
    pub prev: *mut YR_MATCH,
    pub next: *mut YR_MATCH,
}
#[test]
fn bindgen_test_layoutYR_MATCH() {
    assert_eq!(
        ::std::mem::size_of::<YR_MATCH>(),
        56usize,
        concat!("Size of: ", stringify!(YR_MATCH))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_MATCH>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_MATCH))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_MATCH>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCH),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_MATCH>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCH),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_MATCH>())).match_length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCH),
            "::",
            stringify!(match_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_MATCH>())).data_length as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCH),
            "::",
            stringify!(data_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_MATCH>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCH),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_MATCH>())).chain_length as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCH),
            "::",
            stringify!(chain_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_MATCH>())).prev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCH),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_MATCH>())).next as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCH),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_AC_STATE {
    pub depth: u8,
    pub input: u8,
    pub t_table_slot: u32,
    pub failure: *mut YR_AC_STATE,
    pub first_child: *mut YR_AC_STATE,
    pub siblings: *mut YR_AC_STATE,
    pub matches: *mut YR_AC_MATCH,
}
#[test]
fn bindgen_test_layout_YR_AC_STATE() {
    assert_eq!(
        ::std::mem::size_of::<YR_AC_STATE>(),
        40usize,
        concat!("Size of: ", stringify!(YR_AC_STATE))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_STATE>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_STATE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_AC_STATE>())).depth as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_STATE),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_AC_STATE>())).input as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_STATE),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_AC_STATE>())).t_table_slot as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_STATE),
            "::",
            stringify!(t_table_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_AC_STATE>())).failure as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_STATE),
            "::",
            stringify!(failure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_AC_STATE>())).first_child as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_STATE),
            "::",
            stringify!(first_child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_AC_STATE>())).siblings as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_STATE),
            "::",
            stringify!(siblings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_AC_STATE>())).matches as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_STATE),
            "::",
            stringify!(matches)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_AC_AUTOMATON {
    pub tables_size: u32,
    pub t_table_unused_candidate: u32,
    pub bitmask: *mut ::std::os::raw::c_ulong,
    pub t_table: YR_AC_TRANSITION_TABLE,
    pub m_table: YR_AC_MATCH_TABLE,
    pub root: *mut YR_AC_STATE,
}
#[test]
fn bindgen_test_layout_YR_AC_AUTOMATON() {
    assert_eq!(
        ::std::mem::size_of::<YR_AC_AUTOMATON>(),
        40usize,
        concat!("Size of: ", stringify!(YR_AC_AUTOMATON))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_AUTOMATON>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_AUTOMATON))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_AC_AUTOMATON>())).tables_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_AUTOMATON),
            "::",
            stringify!(tables_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_AC_AUTOMATON>())).t_table_unused_candidate as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_AUTOMATON),
            "::",
            stringify!(t_table_unused_candidate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_AC_AUTOMATON>())).bitmask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_AUTOMATON),
            "::",
            stringify!(bitmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_AC_AUTOMATON>())).t_table as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_AUTOMATON),
            "::",
            stringify!(t_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_AC_AUTOMATON>())).m_table as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_AUTOMATON),
            "::",
            stringify!(m_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_AC_AUTOMATON>())).root as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_AUTOMATON),
            "::",
            stringify!(root)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_RULES {
    pub tidx_mask: [::std::os::raw::c_uchar; 4usize],
    pub code_start: *const u8,
    pub mutex: YR_MUTEX,
    pub arena: *mut YR_ARENA,
    pub rules_list_head: *mut YR_RULE,
    pub externals_list_head: *mut YR_EXTERNAL_VARIABLE,
    pub ac_transition_table: YR_AC_TRANSITION_TABLE,
    pub ac_match_table: YR_AC_MATCH_TABLE,
    pub ac_tables_size: u32,
    pub time_cost: u64,
}
#[test]
fn bindgen_test_layout_YR_RULES() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULES>(),
        112usize,
        concat!("Size of: ", stringify!(YR_RULES))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULES>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULES))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULES>())).tidx_mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(tidx_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULES>())).code_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(code_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULES>())).mutex as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULES>())).arena as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULES>())).rules_list_head as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(rules_list_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULES>())).externals_list_head as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(externals_list_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULES>())).ac_transition_table as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(ac_transition_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULES>())).ac_match_table as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(ac_match_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULES>())).ac_tables_size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(ac_tables_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_RULES>())).time_cost as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(time_cost)
        )
    );
}
pub type YR_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        message: ::std::os::raw::c_int,
        message_data: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_ATOM {
    pub length: u8,
    pub bytes: [u8; 4usize],
    pub mask: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_YR_ATOM() {
    assert_eq!(
        ::std::mem::size_of::<YR_ATOM>(),
        9usize,
        concat!("Size of: ", stringify!(YR_ATOM))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ATOM>(),
        1usize,
        concat!("Alignment of ", stringify!(YR_ATOM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_ATOM>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_ATOM>())).bytes as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_ATOM>())).mask as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_ATOM_QUALITY_TABLE_ENTRY {
    pub atom: [u8; 4usize],
    pub quality: u8,
}
#[test]
fn bindgen_test_layout_YR_ATOM_QUALITY_TABLE_ENTRY() {
    assert_eq!(
        ::std::mem::size_of::<YR_ATOM_QUALITY_TABLE_ENTRY>(),
        5usize,
        concat!("Size of: ", stringify!(YR_ATOM_QUALITY_TABLE_ENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ATOM_QUALITY_TABLE_ENTRY>(),
        1usize,
        concat!("Alignment of ", stringify!(YR_ATOM_QUALITY_TABLE_ENTRY))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_ATOM_QUALITY_TABLE_ENTRY>())).atom as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM_QUALITY_TABLE_ENTRY),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_ATOM_QUALITY_TABLE_ENTRY>())).quality as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM_QUALITY_TABLE_ENTRY),
            "::",
            stringify!(quality)
        )
    );
}
pub type YR_ATOMS_QUALITY_FUNC = ::std::option::Option<
    unsafe extern "C" fn(config: *mut YR_ATOMS_CONFIG, atom: *mut YR_ATOM) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_ATOMS_CONFIG {
    pub get_atom_quality: YR_ATOMS_QUALITY_FUNC,
    pub quality_table: *mut YR_ATOM_QUALITY_TABLE_ENTRY,
    pub quality_warning_threshold: ::std::os::raw::c_int,
    pub quality_table_entries: ::std::os::raw::c_int,
    pub free_quality_table: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_YR_ATOMS_CONFIG() {
    assert_eq!(
        ::std::mem::size_of::<YR_ATOMS_CONFIG>(),
        32usize,
        concat!("Size of: ", stringify!(YR_ATOMS_CONFIG))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ATOMS_CONFIG>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_ATOMS_CONFIG))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_ATOMS_CONFIG>())).get_atom_quality as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOMS_CONFIG),
            "::",
            stringify!(get_atom_quality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YR_ATOMS_CONFIG>())).quality_table as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOMS_CONFIG),
            "::",
            stringify!(quality_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_ATOMS_CONFIG>())).quality_warning_threshold as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOMS_CONFIG),
            "::",
            stringify!(quality_warning_threshold)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_ATOMS_CONFIG>())).quality_table_entries as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOMS_CONFIG),
            "::",
            stringify!(quality_table_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<YR_ATOMS_CONFIG>())).free_quality_table as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOMS_CONFIG),
            "::",
            stringify!(free_quality_table)
        )
    );
}
pub type YR_COMPILER_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        error_level: ::std::os::raw::c_int,
        file_name: *const ::std::os::raw::c_char,
        line_number: ::std::os::raw::c_int,
        message: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type YR_COMPILER_INCLUDE_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        include_name: *const ::std::os::raw::c_char,
        calling_rule_filename: *const ::std::os::raw::c_char,
        calling_rule_namespace: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char,
>;
pub type YR_COMPILER_INCLUDE_FREE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        callback_result_ptr: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type YR_COMPILER_RE_AST_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        rule: *const YR_RULE,
        string_identifier: *const ::std::os::raw::c_char,
        re_ast: *const RE_AST,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_FIXUP {
    pub address: *mut ::std::os::raw::c_void,
    pub next: *mut _YR_FIXUP,
}
#[test]
fn bindgen_test_layout__YR_FIXUP() {
    assert_eq!(
        ::std::mem::size_of::<_YR_FIXUP>(),
        16usize,
        concat!("Size of: ", stringify!(_YR_FIXUP))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_FIXUP>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_FIXUP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_FIXUP>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_FIXUP),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_FIXUP>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_FIXUP),
            "::",
            stringify!(next)
        )
    );
}
pub type YR_FIXUP = _YR_FIXUP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _YR_COMPILER {
    pub errors: ::std::os::raw::c_int,
    pub current_line: ::std::os::raw::c_int,
    pub last_error: ::std::os::raw::c_int,
    pub last_error_line: ::std::os::raw::c_int,
    pub error_recovery: jmp_buf,
    pub sz_arena: *mut YR_ARENA,
    pub rules_arena: *mut YR_ARENA,
    pub strings_arena: *mut YR_ARENA,
    pub code_arena: *mut YR_ARENA,
    pub re_code_arena: *mut YR_ARENA,
    pub compiled_rules_arena: *mut YR_ARENA,
    pub externals_arena: *mut YR_ARENA,
    pub namespaces_arena: *mut YR_ARENA,
    pub metas_arena: *mut YR_ARENA,
    pub matches_arena: *mut YR_ARENA,
    pub automaton_arena: *mut YR_ARENA,
    pub automaton: *mut YR_AC_AUTOMATON,
    pub rules_table: *mut YR_HASH_TABLE,
    pub objects_table: *mut YR_HASH_TABLE,
    pub strings_table: *mut YR_HASH_TABLE,
    pub current_namespace: *mut YR_NAMESPACE,
    pub current_rule: *mut YR_RULE,
    pub fixup_stack_head: *mut YR_FIXUP,
    pub namespaces_count: ::std::os::raw::c_int,
    pub loop_address: [*mut u8; 4usize],
    pub loop_identifier: [*mut ::std::os::raw::c_char; 4usize],
    pub loop_depth: ::std::os::raw::c_int,
    pub loop_for_of_mem_offset: ::std::os::raw::c_int,
    pub file_name_stack: [*mut ::std::os::raw::c_char; 16usize],
    pub file_name_stack_ptr: ::std::os::raw::c_int,
    pub last_error_extra_info: [::std::os::raw::c_char; 256usize],
    pub lex_buf: [::std::os::raw::c_char; 8192usize],
    pub lex_buf_ptr: *mut ::std::os::raw::c_char,
    pub lex_buf_len: ::std::os::raw::c_ushort,
    pub include_base_dir: [::std::os::raw::c_char; 1024usize],
    pub user_data: *mut ::std::os::raw::c_void,
    pub incl_clbk_user_data: *mut ::std::os::raw::c_void,
    pub re_ast_clbk_user_data: *mut ::std::os::raw::c_void,
    pub callback: YR_COMPILER_CALLBACK_FUNC,
    pub include_callback: YR_COMPILER_INCLUDE_CALLBACK_FUNC,
    pub include_free: YR_COMPILER_INCLUDE_FREE_FUNC,
    pub re_ast_callback: YR_COMPILER_RE_AST_CALLBACK_FUNC,
    pub atoms_config: YR_ATOMS_CONFIG,
}
#[test]
fn bindgen_test_layout__YR_COMPILER() {
    assert_eq!(
        ::std::mem::size_of::<_YR_COMPILER>(),
        10152usize,
        concat!("Size of: ", stringify!(_YR_COMPILER))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_COMPILER>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_COMPILER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).errors as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).current_line as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(current_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).last_error as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(last_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).last_error_line as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(last_error_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).error_recovery as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(error_recovery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).sz_arena as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(sz_arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).rules_arena as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(rules_arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).strings_arena as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(strings_arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).code_arena as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(code_arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).re_code_arena as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(re_code_arena)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_YR_COMPILER>())).compiled_rules_arena as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(compiled_rules_arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).externals_arena as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(externals_arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).namespaces_arena as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(namespaces_arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).metas_arena as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(metas_arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).matches_arena as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(matches_arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).automaton_arena as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(automaton_arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).automaton as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(automaton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).rules_table as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(rules_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).objects_table as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(objects_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).strings_table as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(strings_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).current_namespace as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(current_namespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).current_rule as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(current_rule)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).fixup_stack_head as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(fixup_stack_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).namespaces_count as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(namespaces_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).loop_address as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(loop_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).loop_identifier as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(loop_identifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).loop_depth as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(loop_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_YR_COMPILER>())).loop_for_of_mem_offset as *const _ as usize
        },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(loop_for_of_mem_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).file_name_stack as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(file_name_stack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_YR_COMPILER>())).file_name_stack_ptr as *const _ as usize
        },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(file_name_stack_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_YR_COMPILER>())).last_error_extra_info as *const _ as usize
        },
        572usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(last_error_extra_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).lex_buf as *const _ as usize },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(lex_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).lex_buf_ptr as *const _ as usize },
        9024usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(lex_buf_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).lex_buf_len as *const _ as usize },
        9032usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(lex_buf_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).include_base_dir as *const _ as usize },
        9034usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(include_base_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).user_data as *const _ as usize },
        10064usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_YR_COMPILER>())).incl_clbk_user_data as *const _ as usize
        },
        10072usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(incl_clbk_user_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_YR_COMPILER>())).re_ast_clbk_user_data as *const _ as usize
        },
        10080usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(re_ast_clbk_user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).callback as *const _ as usize },
        10088usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).include_callback as *const _ as usize },
        10096usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(include_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).include_free as *const _ as usize },
        10104usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(include_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).re_ast_callback as *const _ as usize },
        10112usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(re_ast_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_COMPILER>())).atoms_config as *const _ as usize },
        10120usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(atoms_config)
        )
    );
}
pub type YR_COMPILER = _YR_COMPILER;
extern "C" {
    pub fn yr_compiler_create(compiler: *mut *mut YR_COMPILER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_destroy(compiler: *mut YR_COMPILER);
}
extern "C" {
    pub fn yr_compiler_add_string(
        compiler: *mut YR_COMPILER,
        rules_string: *const ::std::os::raw::c_char,
        namespace_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_get_rules(
        compiler: *mut YR_COMPILER,
        rules: *mut *mut YR_RULES,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_scan_mem(
        rules: *mut YR_RULES,
        buffer: *const u8,
        buffer_size: usize,
        flags: ::std::os::raw::c_int,
        callback: YR_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_destroy(rules: *mut YR_RULES) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_initialize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_get_tidx() -> ::std::os::raw::c_int;
}
