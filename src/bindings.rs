/* automatically generated by rust-bindgen */

pub const STRING_GFLAGS_NULL: u32 = 4096;
pub const META_TYPE_NULL: u32 = 0;
pub const META_TYPE_INTEGER: u32 = 1;
pub const META_TYPE_STRING: u32 = 2;
pub const META_TYPE_BOOLEAN: u32 = 3;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_RELOC {
    pub offset: u32,
    pub next: *mut _YR_RELOC,
}
pub type YR_RELOC = _YR_RELOC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_ARENA_PAGE {
    pub new_address: *mut u8,
    pub address: *mut u8,
    pub size: usize,
    pub used: usize,
    pub reloc_list_head: *mut YR_RELOC,
    pub reloc_list_tail: *mut YR_RELOC,
    pub next: *mut _YR_ARENA_PAGE,
    pub prev: *mut _YR_ARENA_PAGE,
}
pub type YR_ARENA_PAGE = _YR_ARENA_PAGE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_ARENA {
    pub flags: ::std::os::raw::c_int,
    pub page_list_head: *mut YR_ARENA_PAGE,
    pub current_page: *mut YR_ARENA_PAGE,
}
pub type YR_ARENA = _YR_ARENA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_HASH_TABLE_ENTRY {
    pub key: *mut ::std::os::raw::c_void,
    pub key_length: usize,
    pub ns: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_void,
    pub next: *mut _YR_HASH_TABLE_ENTRY,
}
pub type YR_HASH_TABLE_ENTRY = _YR_HASH_TABLE_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_HASH_TABLE {
    pub size: ::std::os::raw::c_int,
    pub buckets: [*mut YR_HASH_TABLE_ENTRY; 1usize],
}
pub type YR_HASH_TABLE = _YR_HASH_TABLE;
pub type YR_MUTEX = pthread_mutex_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_NAMESPACE {
    pub t_flags: [i32; 32usize],
    pub __bindgen_anon_1: YR_NAMESPACE__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_NAMESPACE__bindgen_ty_1 {
    pub name: *mut ::std::os::raw::c_char,
    pub name_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_META {
    pub type__: i32,
    pub integer: i64,
    pub __bindgen_anon_1: YR_META__bindgen_ty_1,
    pub __bindgen_anon_2: YR_META__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_META__bindgen_ty_1 {
    pub identifier: *const ::std::os::raw::c_char,
    pub identifier_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_META__bindgen_ty_2 {
    pub string: *mut ::std::os::raw::c_char,
    pub string_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_MATCHES {
    pub count: i32,
    pub __bindgen_anon_1: YR_MATCHES__bindgen_ty_1,
    pub __bindgen_anon_2: YR_MATCHES__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_MATCHES__bindgen_ty_1 {
    pub head: *mut YR_MATCH,
    pub head_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_MATCHES__bindgen_ty_2 {
    pub tail: *mut YR_MATCH,
    pub tail_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_STRING {
    pub g_flags: i32,
    pub length: i32,
    pub __bindgen_anon_1: YR_STRING__bindgen_ty_1,
    pub __bindgen_anon_2: YR_STRING__bindgen_ty_2,
    pub __bindgen_anon_3: YR_STRING__bindgen_ty_3,
    pub __bindgen_anon_4: YR_STRING__bindgen_ty_4,
    pub chain_gap_min: i32,
    pub chain_gap_max: i32,
    pub fixed_offset: i64,
    pub matches: [YR_MATCHES; 32usize],
    pub unconfirmed_matches: [YR_MATCHES; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_STRING__bindgen_ty_1 {
    pub identifier: *mut ::std::os::raw::c_char,
    pub identifier_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_STRING__bindgen_ty_2 {
    pub string: *mut u8,
    pub string_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_STRING__bindgen_ty_3 {
    pub chained_to: *mut YR_STRING,
    pub chained_to_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_STRING__bindgen_ty_4 {
    pub rule: *mut YR_RULE,
    pub rule_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_RULE {
    pub g_flags: i32,
    pub t_flags: [i32; 32usize],
    pub __bindgen_anon_1: YR_RULE__bindgen_ty_1,
    pub __bindgen_anon_2: YR_RULE__bindgen_ty_2,
    pub __bindgen_anon_3: YR_RULE__bindgen_ty_3,
    pub __bindgen_anon_4: YR_RULE__bindgen_ty_4,
    pub __bindgen_anon_5: YR_RULE__bindgen_ty_5,
    pub num_atoms: i32,
    pub time_cost: i64,
    pub time_cost_per_thread: [i64; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_1 {
    pub identifier: *const ::std::os::raw::c_char,
    pub identifier_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_2 {
    pub tags: *const ::std::os::raw::c_char,
    pub tags_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_3 {
    pub metas: *mut YR_META,
    pub metas_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_4 {
    pub strings: *mut YR_STRING,
    pub strings_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_5 {
    pub ns: *mut YR_NAMESPACE,
    pub ns_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_EXTERNAL_VARIABLE {
    pub type_: i32,
    pub value: YR_EXTERNAL_VARIABLE__bindgen_ty_1,
    pub __bindgen_anon_1: YR_EXTERNAL_VARIABLE__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_EXTERNAL_VARIABLE__bindgen_ty_1 {
    pub i: i64,
    pub f: f64,
    pub s: *mut ::std::os::raw::c_char,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_EXTERNAL_VARIABLE__bindgen_ty_2 {
    pub identifier: *const ::std::os::raw::c_char,
    pub identifier_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_AC_MATCH {
    pub backtrack: u16,
    pub __bindgen_anon_1: YR_AC_MATCH__bindgen_ty_1,
    pub __bindgen_anon_2: YR_AC_MATCH__bindgen_ty_2,
    pub __bindgen_anon_3: YR_AC_MATCH__bindgen_ty_3,
    pub __bindgen_anon_4: YR_AC_MATCH__bindgen_ty_4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH__bindgen_ty_1 {
    pub string: *mut YR_STRING,
    pub string_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH__bindgen_ty_2 {
    pub forward_code: *const u8,
    pub forward_code_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH__bindgen_ty_3 {
    pub backward_code: *const u8,
    pub backward_code_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH__bindgen_ty_4 {
    pub next: *mut YR_AC_MATCH,
    pub next_: i64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_AC_MATCH_TABLE_ENTRY {
    pub __bindgen_anon_1: YR_AC_MATCH_TABLE_ENTRY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH_TABLE_ENTRY__bindgen_ty_1 {
    pub match__: *mut YR_AC_MATCH,
    pub match_: i64,
    _bindgen_union_align: u64,
}
pub type YR_AC_TRANSITION = u32;
pub type YR_AC_TRANSITION_TABLE = *mut YR_AC_TRANSITION;
pub type YR_AC_MATCH_TABLE = *mut YR_AC_MATCH_TABLE_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RE_NODE {
    pub type_: ::std::os::raw::c_int,
    pub __bindgen_anon_1: RE_NODE__bindgen_ty_1,
    pub __bindgen_anon_2: RE_NODE__bindgen_ty_2,
    pub greedy: ::std::os::raw::c_int,
    pub re_class: *mut RE_CLASS,
    pub children_head: *mut RE_NODE,
    pub children_tail: *mut RE_NODE,
    pub prev_sibling: *mut RE_NODE,
    pub next_sibling: *mut RE_NODE,
    pub forward_code: *mut u8,
    pub backward_code: *mut u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RE_NODE__bindgen_ty_1 {
    pub value: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub start: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RE_NODE__bindgen_ty_2 {
    pub mask: ::std::os::raw::c_int,
    pub end: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_CLASS {
    pub negated: u8,
    pub bitmap: [u8; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_AST {
    pub flags: u32,
    pub root_node: *mut RE_NODE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_MATCH {
    pub base: i64,
    pub offset: i64,
    pub match_length: i32,
    pub data_length: i32,
    pub data: *const u8,
    pub chain_length: i32,
    pub prev: *mut YR_MATCH,
    pub next: *mut YR_MATCH,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_AC_STATE {
    pub depth: u8,
    pub input: u8,
    pub t_table_slot: u32,
    pub failure: *mut YR_AC_STATE,
    pub first_child: *mut YR_AC_STATE,
    pub siblings: *mut YR_AC_STATE,
    pub matches: *mut YR_AC_MATCH,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_AC_AUTOMATON {
    pub tables_size: u32,
    pub t_table_unused_candidate: u32,
    pub bitmask: *mut ::std::os::raw::c_ulong,
    pub t_table: YR_AC_TRANSITION_TABLE,
    pub m_table: YR_AC_MATCH_TABLE,
    pub root: *mut YR_AC_STATE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_RULES {
    pub tidx_mask: [::std::os::raw::c_uchar; 4usize],
    pub code_start: *const u8,
    pub mutex: YR_MUTEX,
    pub arena: *mut YR_ARENA,
    pub rules_list_head: *mut YR_RULE,
    pub externals_list_head: *mut YR_EXTERNAL_VARIABLE,
    pub ac_transition_table: YR_AC_TRANSITION_TABLE,
    pub ac_match_table: YR_AC_MATCH_TABLE,
    pub ac_tables_size: u32,
    pub time_cost: u64,
}
pub type YR_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        message: ::std::os::raw::c_int,
        message_data: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_ATOM {
    pub length: u8,
    pub bytes: [u8; 4usize],
    pub mask: [u8; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_ATOM_QUALITY_TABLE_ENTRY {
    pub atom: [u8; 4usize],
    pub quality: u8,
}
pub type YR_ATOMS_QUALITY_FUNC = ::std::option::Option<
    unsafe extern "C" fn(config: *mut YR_ATOMS_CONFIG, atom: *mut YR_ATOM) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_ATOMS_CONFIG {
    pub get_atom_quality: YR_ATOMS_QUALITY_FUNC,
    pub quality_table: *mut YR_ATOM_QUALITY_TABLE_ENTRY,
    pub quality_warning_threshold: ::std::os::raw::c_int,
    pub quality_table_entries: ::std::os::raw::c_int,
    pub free_quality_table: ::std::os::raw::c_int,
}
pub type YR_COMPILER_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        error_level: ::std::os::raw::c_int,
        file_name: *const ::std::os::raw::c_char,
        line_number: ::std::os::raw::c_int,
        message: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type YR_COMPILER_INCLUDE_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        include_name: *const ::std::os::raw::c_char,
        calling_rule_filename: *const ::std::os::raw::c_char,
        calling_rule_namespace: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char,
>;
pub type YR_COMPILER_INCLUDE_FREE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        callback_result_ptr: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type YR_COMPILER_RE_AST_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        rule: *const YR_RULE,
        string_identifier: *const ::std::os::raw::c_char,
        re_ast: *const RE_AST,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_FIXUP {
    pub address: *mut ::std::os::raw::c_void,
    pub next: *mut _YR_FIXUP,
}
pub type YR_FIXUP = _YR_FIXUP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _YR_COMPILER {
    pub errors: ::std::os::raw::c_int,
    pub current_line: ::std::os::raw::c_int,
    pub last_error: ::std::os::raw::c_int,
    pub last_error_line: ::std::os::raw::c_int,
    pub error_recovery: jmp_buf,
    pub sz_arena: *mut YR_ARENA,
    pub rules_arena: *mut YR_ARENA,
    pub strings_arena: *mut YR_ARENA,
    pub code_arena: *mut YR_ARENA,
    pub re_code_arena: *mut YR_ARENA,
    pub compiled_rules_arena: *mut YR_ARENA,
    pub externals_arena: *mut YR_ARENA,
    pub namespaces_arena: *mut YR_ARENA,
    pub metas_arena: *mut YR_ARENA,
    pub matches_arena: *mut YR_ARENA,
    pub automaton_arena: *mut YR_ARENA,
    pub automaton: *mut YR_AC_AUTOMATON,
    pub rules_table: *mut YR_HASH_TABLE,
    pub objects_table: *mut YR_HASH_TABLE,
    pub strings_table: *mut YR_HASH_TABLE,
    pub current_namespace: *mut YR_NAMESPACE,
    pub current_rule: *mut YR_RULE,
    pub fixup_stack_head: *mut YR_FIXUP,
    pub namespaces_count: ::std::os::raw::c_int,
    pub loop_address: [*mut u8; 4usize],
    pub loop_identifier: [*mut ::std::os::raw::c_char; 4usize],
    pub loop_depth: ::std::os::raw::c_int,
    pub loop_for_of_mem_offset: ::std::os::raw::c_int,
    pub file_name_stack: [*mut ::std::os::raw::c_char; 16usize],
    pub file_name_stack_ptr: ::std::os::raw::c_int,
    pub last_error_extra_info: [::std::os::raw::c_char; 256usize],
    pub lex_buf: [::std::os::raw::c_char; 8192usize],
    pub lex_buf_ptr: *mut ::std::os::raw::c_char,
    pub lex_buf_len: ::std::os::raw::c_ushort,
    pub include_base_dir: [::std::os::raw::c_char; 1024usize],
    pub user_data: *mut ::std::os::raw::c_void,
    pub incl_clbk_user_data: *mut ::std::os::raw::c_void,
    pub re_ast_clbk_user_data: *mut ::std::os::raw::c_void,
    pub callback: YR_COMPILER_CALLBACK_FUNC,
    pub include_callback: YR_COMPILER_INCLUDE_CALLBACK_FUNC,
    pub include_free: YR_COMPILER_INCLUDE_FREE_FUNC,
    pub re_ast_callback: YR_COMPILER_RE_AST_CALLBACK_FUNC,
    pub atoms_config: YR_ATOMS_CONFIG,
}
pub type YR_COMPILER = _YR_COMPILER;
extern "C" {
    pub fn yr_compiler_create(compiler: *mut *mut YR_COMPILER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_destroy(compiler: *mut YR_COMPILER);
}
extern "C" {
    pub fn yr_compiler_add_string(
        compiler: *mut YR_COMPILER,
        rules_string: *const ::std::os::raw::c_char,
        namespace_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_get_rules(
        compiler: *mut YR_COMPILER,
        rules: *mut *mut YR_RULES,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_scan_mem(
        rules: *mut YR_RULES,
        buffer: *const u8,
        buffer_size: usize,
        flags: ::std::os::raw::c_int,
        callback: YR_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_destroy(rules: *mut YR_RULES) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_initialize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_get_tidx() -> ::std::os::raw::c_int;
}
